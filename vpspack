#!/bin/bash
if [ $(id -u) -eq 0 ]
then
clear
else
echo -e "Execute o script como usuario \033[1;32mroot\033[0m"
exit
fi
if [ -d /etc/VpsPackdir ]
then
true
else
mkdir /etc/VpsPackdir
fi
if [ -d /etc/VpsPackdir/senha ]
then
true
else
mkdir /etc/VpsPackdir/senha
fi
if [ -d /etc/VpsPackdir/limite ]
then
true
else
mkdir /etc/VpsPackdir/limite
fi
function sistemadetalhes(){
if [ -f /proc/cpuinfo ]
then
echo -e "\n\033[1;30mProcessador\033[0m"
modelo=$(cat /proc/cpuinfo |grep "model name" |uniq |awk -F : {'print $2'})
cpucores=$(cat /proc/cpuinfo |grep "cpu cores" |uniq |awk -F : {'print $2'})
cache=$(cat /proc/cpuinfo |grep "cache size" |uniq |awk -F : {'print $2'})
echo -e "\033[1;32mModelo:\033[0m$modelo"
echo -e "\033[1;32mNucleos:\033[0m$cpucores"
echo -e "\033[1;32mMemoria Cache:\033[0m$cache"
echo -e "\033[1;32mArquitetura: \033[0m$(uname -p)"
else
echo -e "\033[1;30mProcessador\033[0m"
echo "Não foi possivel encontrar /proc/cpuinfo"
fi
if [ -f /etc/lsb-release ]
then
echo -e "\n\033[1;30mSistema Operacional\033[0m"
name=$(cat /etc/lsb-release |grep DESCRIPTION |awk -F = {'print $2'})
codename=$(cat /etc/lsb-release |grep CODENAME |awk -F = {'print $2'})
echo -e "\033[1;32mNome: \033[0m$name"
echo -e "\033[1;32mCodeName: \033[0m$codename"
echo -e "\033[1;32mKernel: \033[0m$(uname -s)"
echo -e "\033[1;32mKernel Release: \033[0m$(uname -r)"
if [ -f /etc/os-release ]
then
devlike=$(cat /etc/os-release |grep LIKE |awk -F = {'print $2'})
echo -e "\033[1;32mDerivado do Antecedente OS: \033[0m$devlike"
fi
else
echo -e "\n\033[1;30mSistema Operacional\033[0m"
echo "Não foi possivel encontrar /etc/lsb-release"
fi
if free 1>/dev/null 2>/dev/null
then
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i mem |awk {'print $2'}) MB | $(( $(free -m |grep -i mem |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEm Uso: \033[0m$(free -m |grep -i mem |awk {'print $3'}) MB | $(( $(free -m |grep -i mem |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLivre: \033[0m$(free -m |grep -i mem |awk {'print $4'}) MB | $(( $(free -m |grep -i mem |awk {'print $4'}) / 1024 )) GB"
echo -e "\n\033[1;30mSwap\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i swap |awk {'print $2'}) MB | $(( $(free -m |grep -i swap |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEm Uso: \033[0m$(free -m |grep -i swap |awk {'print $3'}) MB | $(( $(free -m |grep -i swap |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLivre: \033[0m$(free -m |grep -i swap |awk {'print $4'}) MB | $(( $(free -m |grep -i swap |awk {'print $4'}) / 1024 )) GB"
else
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo "Não foi possivel obter informações sobre a memoria RAM"
fi
}
function monitorar(){
clear
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
echo -e " \033[47;30m   Usuario                :               Conexoes S   \033[0m"
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
for usur in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9] |sort`; do
if [ -f /etc/VpsPackdir/limite/$usur ]; then
limite=$(cat -n /etc/VpsPackdir/limite/$usur |awk '$1 = 1 {print $2}')
else
limite=null
fi
usurnum="$(ps -u $usur |grep sshd |wc -l)\033[1;30m/\033[1;33m$limite"
echo -e "\033[1;33m    $(printf '%-41s%s' $usur $usurnum) \033[0m"
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
done
}
function removerexpirados(){
clear
echo -e "         \033[1;33mRemover Usuarios Expirados\033[0m"
datahoje=$(date +%s)
for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
do
dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
if [[ $dataexp == ' never' ]]; then
id > /dev/null 2>/dev/null
else
dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
dataexpnum=$(date '+%s' -d"$dataexp")
fi
if [[ $dataexpnum < $datahoje ]]; then
printf "\033[1;31m"
printf '%-41s' $user
printf "\033[0m"
echo "Expired Deleted"
kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
else
printf "\033[1;32m"
printf '%-41s' $user
printf "\033[0m"
echo $dataexpn
fi
done
}
function badvpn_install(){
wget https://raw.githubusercontent.com/jluanb/VpsPack/master/badvpn && bash badvpn
}
function removerlimite(){
crontab=$(cat /etc/crontab)
echo -ne "\033[1;32mQual usuario a retirar o limite: \033[0m"
read user
cronsemuser=$(echo "$crontab" |grep -v "#$user#")
echo "$cronsemuser" > /etc/crontab
echo -e "\033[1;37mUsuario: $user, Limite removido\033[0m"
}
function detalhes_usuarios(){
clear

echo -e "\033[1;37m Usuario               Senha               Data E.          Logins S. \033[0m"
for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |sort |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do

if cat /etc/VpsPackdir/limite/$users > /dev/null 2> /dev/null
then
limitecs=$(cat /etc/VpsPackdir/limite/$users)
else
limitecs="null"
fi

if  senha=$(cat /etc/VpsPackdir/senha/$users > /dev/null 2> /dev/null)
then
senha=$(cat /etc/VpsPackdir/senha/$users)
else
senha="null"
fi

data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
date="Nunca"
fi
detalhesdata=$(printf '%-18s' "$data")
detalheslimit=$(printf '%-10s' "$limitecs")
detalhes=$(printf ' %-21s' "$users")
detalhespass=$(printf '%-18s' "$senha")
echo -e "\033[1;33m$detalhes $detalhespass $detalhesdata $detalheslimit\033[0m"
echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
done
}
clear
if [[ $1 == "" ]]
then
echo -e "\033[1;37m       VpsPack V2 © RicKUX \033[0m"
echo -e "\033[1;37mEscolha uma opção:    Para Sair Ctrl + C\033[1;33m
[\033[1;30m01\033[1;33m] Limite \033[1;30m(limite de conexoes simultaneas)\033[1;33m
[\033[1;30m02\033[1;33m] Criar_Usuario \033[1;30m(Criar usuarios)\033[1;33m
[\033[1;30m03\033[1;33m] Remover_expirados \033[1;30m(Remover usuarios ja expirados)\033[1;33m
[\033[1;30m04\033[1;33m] BadVpn \033[1;30m(Instala badvpn para tunnel udp)\033[1;33m
[\033[1;30m05\033[1;33m] BadVpn_Start \033[1;30m(liberar chamadas voip, jogos online, etc)\033[1;33m
[\033[1;30m06\033[1;33m] BadVpn_Stop \033[1;30m(Parar serviço do badvpn)\033[1;33m
[\033[1;30m07\033[1;33m] Remover_Limite \033[1;30m(Remover limite de conexoes de um usuario)\033[1;33m
[\033[1;30m08\033[1;33m] Redefinir_Usuario \033[1;30m(Redefinir Data, senha, etc)\033[1;33m
[\033[1;30m09\033[1;33m] Backup \033[1;30m(Backup dos usuarios)\033[1;33m
[\033[1;30m10\033[1;33m] Deletar_Usuario \033[1;30m(Menu Deletar, Desconectar, etc)\033[1;33m
[\033[1;30m11\033[1;33m] Monitorar \033[1;30m(Use monitoring em tempo real)\033[0m\033[1;33m
[\033[1;30m12\033[1;33m] Usuarios_Detalhes \033[1;30m(Informacoes sobre os usuarios !!)\033[1;33m
[\033[1;30m13\033[1;33m] Speedtest \033[1;30m(Teste de conexão [velocidade de banda])\033[1;33m
[\033[1;30m14\033[1;33m] kernel3.13 \033[1;30m(Troca de kernel [downgrade kernel])\033[1;33m
[\033[1;30m15\033[1;33m] ipp2p \033[1;30m(Bloqueio de Torrent [block p2p])\033[1;33m
[\033[1;30m16\033[1;33m] vpn \033[1;30m(Serviço Openvpn [OpenVPN])\033[1;33m
[\033[1;30m17\033[1;33m] attrepo \033[1;30m(Att git repo [Att repo comandos])\033[1;33m
[\033[1;30m18\033[1;33m] attssh \033[1;30m(Att squid/ssh [Att squid/ssh])\033[1;33m
[\033[1;30m19\033[1;33m] Sistema_Detalhes \033[1;30m(Detalhes sobre o Sistema)\033[0m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1 | 01 )
   read -p "Usuario: " user
   read -p "Limite: " limite
   limite $user $limite;;
  2 | 02 )
   criarusuario;;
  3 | 03 )
   removerexpirados;;
  4 | 04 )
   badvpn_install;;
  5 | 05 )
   badvpn start;;
  6 | 06 )
   badvpn stop;;
  7 | 07 )
   removerlimite;;
  8)
   redefinirusuario;;
  9)
   backup;;
  10)
   deletarusuario;;
  11)
   monitorar;;
  12)
   detalhes_usuarios;;
  13)
   speedtest;;
  14)
   kernel3.13;;
  15)
   ipp2p;;
  16)
   vpn;;
  17)
   attrepo;;
  18)
   attssh;;
  19)
   sistemadetalhes;;
esac
